<<<<<<< HEAD
using System;
using SD = System.Drawing;
using SWF = System.Windows.Forms;
using Eto.Forms;
using Eto.Drawing;

namespace Eto.Platform.Windows
{
	public class DockLayoutHandler : WindowsLayout<SWF.Control, DockLayout>, IDockLayout
	{
		Control child;
		Padding padding;
		Control childToAdd;

		
		public DockLayoutHandler ()
		{
			padding = DockLayout.DefaultPadding;
		}

		public override SWF.Control Control {
			get {
				return Widget.Container != null ? (SWF.Control)Widget.Container.ContainerObject : null;
			}
			protected set {
				base.Control = value;
			}
		}

		public override Size DesiredSize
		{
			get {
				if (child != null)
				{
					var handler = child.Handler as IWindowsControl;
					if (handler != null)
						return handler.DesiredSize;
				}
				var container = Widget.Container.GetContainerControl();
				return container != null ? Generator.Convert (container.PreferredSize) : Size.Empty;
			}
		}

		public override void SetScale (bool xscale, bool yscale)
		{
			base.SetScale (xscale, yscale);
			child.SetScale (xscale, yscale);
		}


		public Padding Padding {
			get {
				return padding;
			}
			set {
				padding = value;
				SWF.Control parent = Control;
				if (parent != null) {
					parent.Padding = Generator.Convert (padding);
				}
			}
		}
		
		public Control Content {
			get { return (Widget.Container == null) ? childToAdd : this.child; }
			set {
				if (Widget.Container == null) {
					childToAdd = value;
					return;
				}
				if (child == value)
					return;
				SWF.Control parent = Control;
				parent.SuspendLayout ();
	
				SWF.Control childControl;

				if (value != null) {
					childControl = value.GetContainerControl();
					childControl.Dock = SWF.DockStyle.Fill;
					value.SetScale (XScale, YScale);
					parent.Padding = Generator.Convert (padding);

                    // Clear the existing child controls
                    parent.Controls.Clear();
					parent.Controls.Add (childControl);
				}
	
				if (this.child != null) {
					child.SetScale (false, false);
					childControl = this.child.GetContainerControl ();
					parent.Controls.Remove (childControl);
				}
	
				this.child = value;
				parent.ResumeLayout ();
			}
		}

		public override void AttachedToContainer ()
		{
			base.AttachedToContainer ();
			if (childToAdd != null)
				this.Content = childToAdd;
		}

	}
=======
using System;
using SD = System.Drawing;
using SWF = System.Windows.Forms;
using Eto.Forms;
using Eto.Drawing;

namespace Eto.Platform.Windows
{
	public class DockLayoutHandler : WindowsLayout<SWF.TableLayoutPanel, DockLayout>, IDockLayout
	{
		Control child;
		Padding padding;

		
		public DockLayoutHandler ()
		{
			padding = DockLayout.DefaultPadding;
			Control = new SWF.TableLayoutPanel {
				Dock = SWF.DockStyle.Fill,
				RowCount = 1,
				ColumnCount = 1,
				Size = SD.Size.Empty,
				AutoSizeMode = SWF.AutoSizeMode.GrowAndShrink,
				AutoSize = true
			};
			Control.ColumnStyles.Add (new SWF.ColumnStyle (SWF.SizeType.Percent, 1));
			Control.RowStyles.Add (new SWF.RowStyle (SWF.SizeType.Percent, 1));
			Padding = DockLayout.DefaultPadding;
		}

		public override object LayoutObject
		{
			get { return Control; }
		}

		public override Size DesiredSize
		{
			get {
				if (child != null)
				{
					var handler = child.Handler as IWindowsControl;
					if (handler != null)
						return handler.DesiredSize;
				}
				var container = Widget.Container.GetContainerControl();
				return container != null ? container.PreferredSize.ToEto () : Size.Empty;
			}
		}

		public override void SetScale (bool xscale, bool yscale)
		{
			base.SetScale (xscale, yscale);
			if (child != null)
				child.SetScale (xscale, yscale);
		}


		public Padding Padding {
			get { return Control.Padding.ToEto (); }
			set { Control.Padding = value.ToSWF (); }
		}
		
		public Control Content {
			get { return child; }
			set {
				if (child == value)
					return;
				Control.SuspendLayout ();
	
				SWF.Control childControl;

				if (value != null) {
					childControl = value.GetContainerControl();
					childControl.Dock = SWF.DockStyle.Fill;
					value.SetScale (XScale, YScale);
					Control.Controls.Add (childControl, 0, 0);
				}
	
				if (this.child != null) {
					child.SetScale (false, false);
					childControl = this.child.GetContainerControl ();
					Control.Controls.Remove (childControl);
				}
	
				this.child = value;
				Control.ResumeLayout ();
			}
		}
	}
>>>>>>> cff29a2c6097785551bb68efb48b3d4a19eeaf6e
}